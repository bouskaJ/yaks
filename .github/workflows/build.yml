# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: build

on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**.adoc'
      - 'KEYS'
      - 'LICENSE'
      - 'NOTICE'
  push:
    branches:
      - master
    paths-ignore:
      - '**.adoc'
      - 'KEYS'
      - 'LICENSE'
      - 'NOTICE'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set Up Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Cache Go modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Cache Maven modules
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    - name: Test
      run: |
        make check-licenses test package-artifacts

  test:
    runs-on: ubuntu-latest
    env:
      KAMEL_INSTALL_REGISTRY: "kind-registry:5000"
      KAMEL_INSTALL_REGISTRY_INSECURE: true
    steps:
    - name: Set Up Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Cache Go modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Cache Maven modules
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    - name: Build
      run: |
        make
        sudo cp yaks /usr/local/bin/
    - name: Kind Cluster
      uses: container-tools/kind-action@v1
    - name: Camel K Tools
      uses: container-tools/camel-k-action@v1
    - name: Install
      run: |
        kamel install --cluster-setup
        yaks install
    - name: E2E Tests
      run: |
        # Eventually `yaks test examples` should work

        # For now:
        yaks test examples/camel
        yaks test examples/camel-k
        #yaks test examples/extension
        #yaks test examples/http
        #yaks test examples/jdbc
        yaks test examples/jitpack
        #yaks test examples/kamelets
        #yaks test examples/knative
        yaks test examples/kubernetes
        yaks test examples/logging
        yaks test examples/namespace
        #yaks test examples/openapi
        yaks test examples/run-scripts
        #yaks test examples/secrets
        yaks test examples/settings
        yaks test examples/test-group
        yaks test examples/helloworld.feature


  snapshot:
    runs-on: ubuntu-latest
    needs:
    - build
    - test
    if: github.ref == 'refs/heads/master' && github.repository == 'citrusframework/yaks'

    steps:
    - name: Set Up Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Cache Go modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Cache Maven modules
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    - name: Prerequisites
      run: |
        export OPERATOR_SDK_VERSION=v0.19.4
        curl -L https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu -o operator-sdk
        chmod a+x operator-sdk
        sudo mv operator-sdk /usr/local/bin
    - name: Prepare Release Environment
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      run: |
        SNAPSHOT_VERSION=$(make snapshot-version)
        echo "Using SNAPSHOT_VERSION=$SNAPSHOT_VERSION"
        echo "::set-env name=SNAPSHOT_VERSION::$SNAPSHOT_VERSION"

        IMAGE_NAME=docker.io/yaks/yaks
        echo "Using IMAGE_NAME=$IMAGE_NAME"
        echo "::set-env name=IMAGE_NAME::$IMAGE_NAME"

        git fetch --prune --unshallow
        docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - name: Build
      run: |
        make IMAGE_NAME=$IMAGE_NAME clean release-snapshot
